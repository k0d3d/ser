{
  "name": "lockit",
  "version": "0.6.2",
  "description": "Authentication solution for Express",
  "main": "index.js",
  "scripts": {
    "test": "grunt"
  },
  "keywords": [
    "express",
    "middleware",
    "user",
    "registration",
    "signup",
    "authorization",
    "authentication"
  ],
  "author": {
    "name": "Mirco Zeiss",
    "email": "mirco.zeiss@gmail.com"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/zeMirco/lockit"
  },
  "dependencies": {
    "debug": "~0.7.4",
    "nano": "~4.6.1",
    "lockit-signup": "0.5.2",
    "lockit-login": "0.5.1",
    "lockit-forgot-password": "0.3.3",
    "lockit-delete-account": "0.4.0",
    "lockit-utils": "0.1.1",
    "node.extend": "~1.0.9"
  },
  "devDependencies": {
    "express": "3.3.5",
    "jade": "*",
    "should": "~2.1.1",
    "supertest": "~0.8.2",
    "grunt-mocha-test": "~0.8.1",
    "grunt": "~0.4.2",
    "grunt-contrib-jshint": "~0.8.0",
    "lockit-couchdb-adapter": "0.2.2"
  },
  "readme": "# Lockit\n\n[![Build Status](https://travis-ci.org/zeMirco/lockit.png?branch=master)](https://travis-ci.org/zeMirco/lockit) [![NPM version](https://badge.fury.io/js/lockit.png)](http://badge.fury.io/js/lockit)\n\nLockit is an authentication solution for [Express](http://expressjs.com/).\n\nIt consists of multiple single purpose modules:\n\n - [lockit-login](https://github.com/zeMirco/lockit-login)\n - [lockit-signup](https://github.com/zeMirco/lockit-signup)\n - [lockit-delete-account](https://github.com/zeMirco/lockit-delete-account)\n - [lockit-forgot-password](https://github.com/zeMirco/lockit-forgot-password)\n - [lockit-sendmail](https://github.com/zeMirco/lockit-sendmail)\n - [lockit-couchdb-adapter](https://github.com/zeMirco/lockit-couchdb-adapter)\n - [lockit-mongodb-adapter](https://github.com/zeMirco/lockit-mongodb-adapter)\n - [lockit-sql-adapter](https://github.com/zeMirco/lockit-sql-adapter)\n - [lockit-utilities](https://github.com/zeMirco/lockit-utilities)\n - [lockit-template-blank](https://github.com/zeMirco/lockit-template-blank)\n\n## Installation\n\n1. Install and require\n\n  `npm install lockit`\n\n  ```js\n  var config = require('./config.js');\n  var Lockit = require('lockit');\n  \n  var app = express();\n  \n  // express middleware\n  // ...\n  // sessions are required\n  app.use(express.cookieParser('your secret here'));\n  app.use(express.cookieSession());\n  \n  // use middleware before router so your own routes have access to\n  // req.session.email and req.session.username\n  var lockit = new Lockit(app, config);\n  \n  // you now have all the routes like /login, /signup, etc.\n  // and you can listen on events. For example 'signup'\n  lockit.on('signup', function(user, res) {\n    console.log('a new user signed up');\n    res.send('Welcome!');   // set signup.handleResponse to 'false' for this to work\n  });\n  \n  app.use(app.router);\n  // continue with express middleware\n  // ...\n  ```\n  \n2. Add styles\n\n  Views are built with [bootstrap](http://getbootstrap.com/). \n  You can use [your own ones](#custom-views) though!\n  Use Bootstrap CDN and add the following line to your `layout.jade`\n  \n  ```jade\n  link(rel='stylesheet', href='//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css')\n  ```\n\n3. Install database adapter \n\n  `npm install lockit-[DB]-adapter` where `[DB]` can be\n\n  | Database | Command |\n  | --- | --- |\n  | [CouchDB](https://github.com/zeMirco/lockit-couchdb-adapter) | `npm install lockit-couchdb-adapter` |\n  | [MongoDB](https://github.com/zeMirco/lockit-mongodb-adapter) | `npm install lockit-mongodb-adapter` |\n  | [SQL (PostgreSQL, MySQL, MariaDB or SQLite)](https://github.com/zeMirco/lockit-sql-adapter) | `npm install lockit-sql-adapter` |\n  \n  If you use a SQL database you also have to install the connector.\n  \n  ```\n  npm install pg       # for postgres\n  npm install mysql    # for mysql\n  npm install sqlite3  # for sqlite\n  npm install mariasql # for mariasql\n  ```\n\n## Configuration\n\nYou need a `config.js` somewhere in your app.\n\n### Database connection\n\nAdd the database connection string to your `config.js`.\n \n```js\n// database settings for CouchDB\nexports.db = 'http://127.0.0.1:5984/test';        // connection string for database\n\n// or if you want to use MongoDB\n// exports.db = 'mongodb://127.0.0.1/test';\n// exports.dbCollection = 'users';                // collection name for MongoDB\n\n// PostgreSQL\n// exports.db = 'postgres://127.0.0.1:5432/users';\n// exports.dbCollection = 'users';                // table name for SQL databases\n\n// MySQL\n// exports.db = 'mysql://127.0.0.1:9821/users';\n// exports.dbCollection = 'users';\n\n// SQLite\n// exports.db = 'sqlite://:memory:';\n// exports.dbCollection = 'users';\n```\n \n### Send emails\n\nBy default the email service is stubbed and no emails are sent. \nThat means that you won't receive any signup and password reset tokens. \nYou have to look them up in your database and call the routes manually (e.g. `/signup/:token`).\nTo send emails you need an email server and you have to change the settings in your `config.js`:\n\n - `emailType` - usually `SMTP`\n - `emailSettings` - see [nodemailer](https://github.com/andris9/Nodemailer) for more information\n \nWith [mailgun](http://www.mailgun.com/pricing) you can send up to 10,000 emails per month for free.\n\n```js\nexports.emailType = 'SMTP';\nexports.emailSettings = {\n  service: 'Mailgun',\n  auth: {\n    user: 'postmaster@username.mailgun.org',\n    pass: 'secret-password'\n  }\n};\n```\n\n### Custom views\n\nLockit comes with built-in views which are based on Bootstrap.\nIf you want to use your own custom views you can. It is dead simple.\n\nPut them into your `views` folder, for example `views/lockit/myLogin.jade`.\nThen edit your `config.js` and set the path to your custom view.\n\n```js\nexports.login = {\n  route: '/login',\n  logoutRoute: '/logout',\n  views: {\n    login: 'lockit/myLogin.jade',\n    loggedOut: 'lockit/myLogoutSuccess.jade'\n  }\n};\n```\n\nThe only thing you have to keep in mind is the structure. The `login.views.login` view, for example,\nneeds a form element with two input fields. The `method` has to be `POST` and `action` should point\nto your `login.route`. The input fields have to have the names `login` and `password`. If something\nwent wrong during the login process you'll get an `error` variable that you can use in your template.\n\nHere is a minimalistic example for an alternative `myLogin.jade`.\n\n```jade\nextend /layout\n\nblock content\n  h1 Login\n  form(action=\"/login\", method=\"POST\")\n    div\n      label(for=\"login\") Email or Username\n      input(type=\"text\", id=\"login\", name=\"login\", placeholder=\"Your email or username\")\n    div\n      label(for=\"password\") Password\n      input(type=\"password\", id=\"password\", name=\"password\", placeholder=\"Your password\")\n    if error\n      p #{error}\n    input(type=\"submit\", value=\"Login\")\n```\n\nFor more information about each view see the `views` folder inside the different repositories.\nMake sure your view extends `/layout` which is different to your normal views. They extend `layout`\nwithout the slash. This is required to find the view.\n\n### Events\n\nLockit emits the most important events for user authentication. Those are\n\n - `signup`\n - `login`\n - `logout`\n - `delete`\n \nYou can use these events to intercept requests and implement some custom logic, \nlike getting the gravatar before sending a response to the client.\n \n#### `signup`\n\nA new user signed up. The callback function has two arguments.\n\n- `user` is an object and contains information about the new user, like `user.username` or `user.email`.\n- `res` is the standard Express.js `res` object with methods like `res.render` and `res.send`.\nIf you've set `signup.handleResponse` to `false` Lockit will not handle the response for you.\nYou therefore have to send the response back to the client manually or otherwise it will wait forever.\n \n```js\nlockit.on('signup', function(user, res) {\n  // ...\n});\n```\n\n##### `login`\n\nA user logged in. Callback function this time has three arguments.\n\n- `user` is again the JSON object containing info about that particular user.\n- `res` is the normal Express.js response object with all properties and methods.\n- `target` is the redirect target route after a successful login, i.e. `/settings`\n\n```js\nlockit.on('login', function(user, res, target) {\n  // ...\n});\n```\n\n##### `logout`\n\nA user logged out. Same as above without the `target` string.\n\n```js\nlockit.on('logout', function(user, res) {\n  // ...\n});\n```\n\n##### `delete`\n\nA user deleted an account. Same callback as above.\n\n```js\nlockit.on('delete', function(user, res) {\n  // ...\n});\n```\n\n### REST API\n\nIn a single page application (SPA) all the routing and template rendering is done on the client.\nBefore version 0.5.0 Lockit caught relevant routes, like `/login` or `/signup`,\nand did the entire rendering on the server.\n\nStarting with version 0.5.0 you're able to use Lockit as a REST API and communicate via JSON.\nAll you have to do is set `exports.rest = true` in your `config.js`.\n\nWith REST enabled all default routes get a `/rest` prefix so you can catch `/login`\non the client. To allow for true page refreshes (i.e. user is at `/login` and refreshes the page)\nall routes on the server, like `/login` and `/signup`, send the `index.html` from the `public/`\nfolder. From there your SPA has to take over.\n\nHere is a short example how the process works.\n\n1. User sends GET request for `/login`\n2. Server has a route handler for this request and sends `index.html` back\n3. Client router takes over and renders `/login` page\n4. User enters credentials and submits the form\n5. Client controller catches submit and sends POST via AJAX request to `/rest/login`\n6. Server handles POST request and validates user credentials\n7. Server sends status code `200` or some JSON with error message\n8. Client reacts to JSON from server and redirects on success or shows error\n\nI've built a [simple example](https://github.com/zeMirco/lockit/tree/master/examples/angular) \nusing AngularJS on the client side.\n \n### Example config\n\nIf you want to go crazy and customize all the things you can:\n\n```js\n// name for subject and email content\nexports.appname = 'lockit - Test App';\n\n// url for proper link generation\nexports.url = 'http://localhost:3000';\n\n// email settings (same as nodemailer)\nexports.emailType = 'Stub';\nexports.emailSettings = {\n  service: 'none',\n  auth: {\n    user: 'none',\n    pass: 'none'\n  }\n};\n\n// email template from npm\nexports.emailTemplate = 'lockit-template-blank';\n\n// render views or json for single page apps\nexports.rest = false;\n\n// signup settings\nexports.signup = {\n  route: '/signup',\n  tokenExpiration: '1 day',\n  views: {\n    signup: '',         // input fields 'username', 'email' and 'password' | local variable 'error' | POST /'signup.route'\n    linkExpired: '',    // message link has expired | input field 'email' | POST /'signup.route'/resend-verification\n    verified: '',       // message email is now verified and maybe link to /'login.route'\n    signedUp: '',       // message email has been sent => check your inbox\n    resend: ''          // input field 'email' | local variable 'error' | POST /'signup.route'/resend-verification\n  },\n  handleResponse: true  // let lockit handle the response after signup success\n};\n\n// login settings\nexports.login = {\n  route: '/login',\n  logoutRoute: '/logout',\n  views: {\n    login: '',          // input fields 'login' and 'password' | POST /'login.route' | local variable 'error'\n    loggedOut: ''       // message that user logged out\n  },\n  handleResponse: true  // let lockit handle the response after login/logout success\n};\n\n// forgot password settings\nexports.forgotPassword = {\n  route: '/forgot-password',\n  tokenExpiration: '1 day',\n  views: {\n    forgotPassword: '', // input field 'email' | POST /'forgotPassword.route' | local variable 'error'\n    newPassword: '',    // input field 'password' | POST /'forgotPassword.route'/#{token} | local variable 'error'\n    changedPassword: '',// message that password has been changed successfully\n    linkExpired: '',    // message that link has expired and maybe link to /'forgotPassword.route'\n    sentEmail: ''       // message that email with token has been sent\n  }\n};\n\n// delete account settings\nexports.deleteAccount = {\n  route: '/delete-account',\n  views: {\n    remove: '',         // input fields 'username', 'phrase', 'password' | POST /'deleteAccount.route' | local variable 'error'\n    removed: ''         // message that account has been deleted\n  },\n  handleResponse: true  // let lockit handle the response after delete account success\n};\n\n// lock account\n// show warning after three failed login attempts\nexports.failedLoginsWarning = 3;\n// lock account after five failed login attempts\nexports.failedLoginAttempts = 5;\n// lock account for 20 minutes\nexports.accountLockedTime = '20 minutes';\n\n// public email address of your app\nexports.emailFrom = 'welcome@lock.it';\n\n// email signup template\nexports.emailSignup = {\n  subject: 'Welcome to <%- appname %>',\n  text: [\n    '<h2>Hello <%- username %></h2>',\n    'Welcome to <%- appname %>.',\n    '<p><%- link %> to complete your registration.</p>'\n  ].join(''),\n  linkText: 'Click here'\n};\n\n// email already taken template\nexports.emailSignupTaken = {\n  subject: 'Email already registered',\n  text: [\n    '<h2>Hello <%- username %></h2>',\n    'you or someone else tried to sign up for <%- appname %>.',\n    '<p>Your email is already registered and you cannot sign up twice.',\n    ' If you haven\\'t tried to sign up, you can safely ignore this email. Everything is fine!</p>',\n    '<p>The <%- appname %> Team</p>'\n  ].join('')\n};\n\n// resend signup template\nexports.emailResendVerification = {\n  subject: 'Complete your registration',\n  text: [\n    '<h2>Hello <%- username %></h2>',\n    'here is the link again. <%- link %> to complete your registration.',\n    '<p>The <%- appname %> Team</p>'\n  ].join(''),\n  linkText: 'Click here'\n};\n\n// forgot password template\nexports.emailForgotPassword = {\n  subject: 'Reset your password',\n  text: [\n    '<h2>Hey <%- username %></h2>',\n    '<%- link %> to reset your password.',\n    '<p>The <%- appname %> Team</p>'\n  ].join(''),\n  linkText: 'Click here'\n};\n```\n\n## Features\n\n - responsive html email template: [lockit-template-blank](https://github.com/zeMirco/lockit-template-blank)\n - support for wide range of databases out of the box\n - email address verification\n - account locking after too many failed login attempts\n - verification link expiration\n - failed login tracking\n - /login redirection when user is unauthorized\n - password hash generation with bcrypt\n - unit tests for all modules\n - serves proper HTML views or only JSON\n - events for most important happenings `login`, `logout`, `signup` and `delete`\n - implementation of [lots of](https://www.owasp.org/index.php/Guide_to_Authentication) [best](http://stackoverflow.com/questions/549/the-definitive-guide-to-form-based-website-authentication) [pratices](https://www.owasp.org/index.php/Authentication_Cheat_Sheet)\n\n\n## Routes included\n\nFrom [lockit-signup](https://github.com/zeMirco/lockit-signup)\n\n - GET /signup\n - POST /signup\n - GET /signup/:token\n - GET /signup/resend-verification\n - POST /signup/resend-verification\n\nFrom [lockit-login](https://github.com/zeMirco/lockit-login)\n\n - GET /login\n - POST /login\n - GET /logout\n\nFrom [lockit-forgot-password](https://github.com/zeMirco/lockit-forgot-password)\n\n - GET /forgot-password\n - POST /forgot-password\n - GET /forgot-password/:token\n - POST /forgot-password/:token\n\nFrom [lockit-delete-account](https://github.com/zeMirco/lockit-delete-account)\n\n - GET /delete-account\n - POST /delete-account\n\n## Test\n\n`grunt`\n\n## License\n\nCopyright (C) 2014 [Mirco Zeiss](mailto: mirco.zeiss@gmail.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/zeMirco/lockit/issues"
  },
  "homepage": "https://github.com/zeMirco/lockit",
  "_id": "lockit@0.6.2",
  "_from": "lockit@"
}
